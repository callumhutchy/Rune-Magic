import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.util.regex.Pattern
import java.util.regex.Matcher

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
      url "https://plugins.gradle.org/m2/"
    }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
         classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.8"
    }
}

repositories {
    mavenCentral()
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "com.matthewprenger.cursegradle"

ext.configFile = file('build.properties')

ext.config = parseConfig(configFile)
ext.priv = parseConfig(file('private.properties'))

version = "${config.version}-${config.build_number}"
group = "callumhutchy.runemagic" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "eclipse/assets"

    mappings = config.mc_mappings
    //This, does the token replacement.
    //Though, I reccomend this to be replaced with a token such as @VERSION@
    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version

    replaceIn 'ModInfo.java' //I may have missed another file, though I can only find it in here.
    useDepAts = true
    makeObfSourceJar = false
}


dependencies {
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

processResources {
   
    Matcher matcherVersion
   
       def values = "${config.version}".split('\\.')
        
        def major = Integer.parseInt(values[0])
        def minor = Integer.parseInt(values[1])
        def patch = Integer.parseInt(values[2])
        
        project.version = major + "." + minor + "." + patch
    
    
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    
}

/**
 * These, go outside of the processResources {}* Though, this was added with the NEI intergation commit (8bf4680)
 */
task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${baseName} ${version}-deobf.${extension}"
}

artifacts {
    archives deobfJar
}
/**
 * Increments the buildnumber in your config file, and saves it
 */
task incrementBuildNumber(dependsOn: 'reobfJar') << {

    config.build_number = (config.build_number.toString().toInteger()) + 1
    configFile.withWriter {
        config.toProperties().store(it, "")
    }

    // todo make this flexibile - collection of supported mc versions

    file('web/versions.ini').append("\n${version}=${minecraft.version}")
    file("${config.dir_repo}/version/${minecraft.version}.txt").write("${version}")
}

// I have no idea what I'm doing
task wtfGradle2(type: Copy) {
    from(jar.destinationDir)
    into file("${config.dir_output}/wtf")
}

// Seriously, I'm desperate to make this work
task wtfGradle1(type: Delete) {
    dependsOn "wtfGradle2"
    delete "${config.dir_output}/wtf/${deobfJar.archiveName}"
}

task output(type: Copy) {
    dependsOn "wtfGradle1"
    from(jar.destinationDir)
    into file(config.dir_output)
}

task outputDeobf(type: Copy) {
    dependsOn "output"
    from(config.dir_output) {
        include deobfJar.archiveName
    }
    into file("${config.dir_output}/deobf")
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    //rename the default output, for some better... sanity with scipts
    archiveName = "${baseName} ${version}.${extension}"

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
}

task incrementPatch << {
    String oldVersion
    String newVersion
    Matcher matcherVersion
    
    println(":incrementPatch - Incrementing Patch Version ...")
    
    
        def values = "${config.version}".split('\\.')
        
        def major = Integer.parseInt(values[0])
        def minor = Integer.parseInt(values[1])
        def patch = Integer.parseInt(values[2])
        
        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + minor + "." + (patch + 1)
   
        
    println(":incrementPatch - Current Version: " + oldVersion)
    println(":incrementPatch - New Version:     " + newVersion)
    project.version = newVersion
    
    config.version = newVersion
    configFile.withWriter {
        config.toProperties().store(it, "")
    }
}

task incrementMinor << {
    String oldVersion
    String newVersion
    Matcher matcherVersion
    
    println(":incrementMinor - Incrementing Minor Version ...")
    
        def values = "${config.version}".split('\\.')
        
        def major = Integer.parseInt(values[0])
        def minor = Integer.parseInt(values[1])
        def patch = Integer.parseInt(values[2])
        
        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + (minor + 1) + ".0"
     
    println(":incrementMinor - Current Version: " + oldVersion)
    println(":incrementMinor - New Version:     " + newVersion)
    project.version = newVersion
    
   config.version = newVersion
    configFile.withWriter {
        config.toProperties().store(it, "")
    }
}

task incrementMajor << {
    String oldVersion
    String newVersion
    Matcher matcherVersion
    
    println(":incrementMajor - Incrementing Major Version ...")

        def values = "${config.version}".split('\\.')
        
        def major = Integer.parseInt(values[0])
        def minor = Integer.parseInt(values[1])
        def patch = Integer.parseInt(values[2])
        
        oldVersion = major + "." + minor + "." + patch
        newVersion = (major + 1) + ".0.0"
    
    println(":incrementMinor - Current Version: " + oldVersion)
    println(":incrementMinor - New Version:     " + newVersion)
    project.version = newVersion
    
   config.version = newVersion
    configFile.withWriter {
        config.toProperties().store(it, "")
    }
}

task setDevVersion << {
    String oldVersion
    String newVersion
    Matcher matcherVersion
        
    
        println(":setDevVersion - Setting to Dev Version")
        
        def values = "${config.version}".split('\\.')
        
        def major = Integer.parseInt(values[0])
        def minor = Integer.parseInt(values[1])
        def patch = Integer.parseInt(values[2])
        
        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + minor + "." + patch + "-dev.1"
    
    
    println(":incrementPatch - Current Version: " + oldVersion)
    println(":incrementPatch - New Version:     " + newVersion)
    project.version = newVersion
    
    config.version = newVersion
    configFile.withWriter {
        config.toProperties().store(it, "")
    }
                 
         
         }

task getModData << {

    println(":getModData - Getting mod-related data from build.properties")
    
    def configModid = "runemagic"
    def configMcVersion = "${config.mc_version}"
    def configGroup = "callumhutchy.runemagic"
    
    println(":getModData - ModID:      " + configModid)
    println(":getModData - MC-Version: " + configMcVersion)
    println(":getModData - Group:      " + configGroup)
    
    project.archivesBaseName = configModid + "-" + configMcVersion
    println(project.archivesBaseName)
    project.group = configGroup
}

curseforge {
println("Attempting to upload to curse")
    apiKey = '7b3bd274-a667-4a42-b3b5-9cddbc4d60a4'
    project {
        id = "222854"
        changelog = """
            https://minecraft.curseforge.com/projects/runemagic
        """
        releaseType = "release"
        addGameVersion "${config.cf_meta_version}"
    }
}

build.mustRunAfter getModData
build.dependsOn getModData

defaultTasks 'clean', 'build','incrementBuildNumber', 'curseforge'